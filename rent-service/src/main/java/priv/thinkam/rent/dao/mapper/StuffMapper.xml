<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="priv.thinkam.rent.dao.mapper.StuffMapper">
  <resultMap id="BaseResultMap" type="priv.thinkam.rent.dao.model.Stuff">
    <id column="stuff_id" jdbcType="INTEGER" property="stuffId" />
    <result column="category_id" jdbcType="INTEGER" property="categoryId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="deposit" jdbcType="INTEGER" property="deposit" />
    <result column="rental" jdbcType="INTEGER" property="rental" />
    <result column="status" jdbcType="TINYINT" property="status" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    stuff_id, category_id, name, deposit, rental, status
  </sql>
  <select id="selectByExample" parameterType="priv.thinkam.rent.dao.model.StuffExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from stuff
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from stuff
    where stuff_id = #{stuffId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from stuff
    where stuff_id = #{stuffId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="priv.thinkam.rent.dao.model.StuffExample">
    delete from stuff
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="priv.thinkam.rent.dao.model.Stuff">
    <selectKey keyProperty="stuffId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into stuff (category_id, name, deposit, 
      rental, status)
    values (#{categoryId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{deposit,jdbcType=INTEGER}, 
      #{rental,jdbcType=INTEGER}, #{status,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="priv.thinkam.rent.dao.model.Stuff">
    <selectKey keyProperty="stuffId" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into stuff
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="categoryId != null">
        category_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="deposit != null">
        deposit,
      </if>
      <if test="rental != null">
        rental,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="categoryId != null">
        #{categoryId,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="deposit != null">
        #{deposit,jdbcType=INTEGER},
      </if>
      <if test="rental != null">
        #{rental,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="priv.thinkam.rent.dao.model.StuffExample" resultType="java.lang.Long">
    select count(*) from stuff
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update stuff
    <set>
      <if test="record.stuffId != null">
        stuff_id = #{record.stuffId,jdbcType=INTEGER},
      </if>
      <if test="record.categoryId != null">
        category_id = #{record.categoryId,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.deposit != null">
        deposit = #{record.deposit,jdbcType=INTEGER},
      </if>
      <if test="record.rental != null">
        rental = #{record.rental,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update stuff
    set stuff_id = #{record.stuffId,jdbcType=INTEGER},
      category_id = #{record.categoryId,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      deposit = #{record.deposit,jdbcType=INTEGER},
      rental = #{record.rental,jdbcType=INTEGER},
      status = #{record.status,jdbcType=TINYINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="priv.thinkam.rent.dao.model.Stuff">
    update stuff
    <set>
      <if test="categoryId != null">
        category_id = #{categoryId,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="deposit != null">
        deposit = #{deposit,jdbcType=INTEGER},
      </if>
      <if test="rental != null">
        rental = #{rental,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
    </set>
    where stuff_id = #{stuffId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="priv.thinkam.rent.dao.model.Stuff">
    update stuff
    set category_id = #{categoryId,jdbcType=INTEGER},
      name = #{name,jdbcType=VARCHAR},
      deposit = #{deposit,jdbcType=INTEGER},
      rental = #{rental,jdbcType=INTEGER},
      status = #{status,jdbcType=TINYINT}
    where stuff_id = #{stuffId,jdbcType=INTEGER}
  </update>
</mapper>